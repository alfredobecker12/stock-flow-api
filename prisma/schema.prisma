// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Tabela de usuários
model User {
  id            Int      @id @default(autoincrement())
  email         String   @unique
  password      String
  name          String?
  active        Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  sessions      Session[]
  notasMovimentacao NotaMovimentacao[]

  @@map("users")
}

// Tabela de sessões
model Session {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Tabela de produtos
model Produto {
  id          Int      @id @default(autoincrement())
  codigo      String   @unique
  nome        String
  descricao   String?
  unidade     String   @default("UN") // UN, KG, L, etc
  preco       Decimal  @default(0)
  quantidade  Decimal  @default(0) // quantidade em estoque
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  itensNota   ItemNotaMovimentacao[]

  @@map("produtos")
}

// Tabela de notas de entrada/saída
model NotaMovimentacao {
  id          Int      @id @default(autoincrement())
  numero      String   @unique
  tipo        String   // ENTRADA, SAIDA
  userId      Int
  data        DateTime @default(now())
  observacoes String?
  motivo      String?
  destinatario String?
  valorTotal  Decimal  @default(0)
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User        @relation(fields: [userId], references: [id])
  itens       ItemNotaMovimentacao[]

  @@map("notas_movimentacao")
}

// Tabela de itens das notas
model ItemNotaMovimentacao {
  id          Int      @id @default(autoincrement())
  notaId      Int
  produtoId   Int
  quantidade  Decimal
  valorUnitario Decimal @default(0)
  valorTotal  Decimal  @default(0)
  createdAt   DateTime @default(now())

  nota        NotaMovimentacao @relation(fields: [notaId], references: [id], onDelete: Cascade)
  produto     Produto @relation(fields: [produtoId], references: [id])

  @@map("itens_nota_movimentacao")
}
